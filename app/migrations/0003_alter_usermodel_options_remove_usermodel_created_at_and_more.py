# Generated by Django 5.0.7 on 2024-10-17 16:54

import app.models
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0002_alter_usermodel_phonenumber'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='usermodel',
            options={'verbose_name': 'user', 'verbose_name_plural': 'users'},
        ),
        migrations.RemoveField(
            model_name='usermodel',
            name='created_at',
        ),
        migrations.RemoveField(
            model_name='usermodel',
            name='phonenumber',
        ),
        migrations.RemoveField(
            model_name='usermodel',
            name='updated_at',
        ),
        migrations.AddField(
            model_name='usermodel',
            name='code',
            field=models.CharField(max_length=4, null=True),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='date_joined',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined'),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='expire_date',
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='first_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='first name'),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status'),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='last_login',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='last_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='last name'),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='password',
            field=models.CharField(default='your_default_password_here', max_length=128),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='phone',
            field=models.CharField(default='+998000000000', error_messages={'unique': 'Bu telefon raqamiga ega foydalanuvchi allaqachon mavjud.'}, help_text='Majburiy. 15 yoki undan kam belgi. Faqat raqamlar, ixtiyoriy ravishda + bilan boshlanadi.', max_length=15, unique=True, validators=[app.models.UnicodePhoneValidator()], verbose_name='phone'),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='status',
            field=models.CharField(choices=[('new', 'Yangi'), ('approwed', 'Tasdiqlangan')], default='new', max_length=100),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
